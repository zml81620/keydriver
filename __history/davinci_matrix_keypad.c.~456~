#include <linux/module.h>
#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/platform_device.h>
#include <linux/jiffies.h>
#include <linux/param.h>
#include <linux/input.h>
#include <linux/delay.h>
#include <asm-generic/gpio.h>
#include <linux/gpio.h>

#include <mach/hardware.h>


#define ROW_NR 3
#define COL_NR 6
#define DFT_COL_SCAN_UDELAY 15
#define MAX_COL_SCAN_UDELAY 20
#define DEV_DRV_NAME "davinci_matrix_keypad"
#define INIT_KEY_STATUS 0
#define KEY_ENABLE_DELAY  700


static const char row_gpio[ROW_NR] = {10,11,12};
static const char col_gpio[COL_NR] = {14,15,16,17,13,19};


static const int key_matrix[ROW_NR][COL_NR] =
{
    [0] = {KEY_F,KEY_D,KEY_G,KEY_Z,KEY_X,KEY_S}, 
    [1] = {KEY_H,KEY_J,KEY_K,KEY_L,KEY_RESERVED,KEY_RESERVED},
    [2] = {KEY_ESC,KEY_ENTER,KEY_LEFT,KEY_UP,KEY_RIGHT,KEY_DOWN}
};
static struct timer_list scan_timer;
static struct input_dev *kp_input_dev;
static unsigned char row0_status = 0;
static unsigned char row1_status = 0;
static unsigned char row2_status = 0;

//static unsigned char  g_init_key = 0;
static unsigned short g_key_delay = 0;

static unsigned char row_status[ROW_NR][COL_NR] =
{
    [0] = {0x1,0x2,0x4,0x8,0x10,0x20},
    [1] = {0x1,0x2,0x4,0x8,0xFF,0xFF},
    [2] = {0x1,0x2,0x06,0x0A,0x12,0x22}
};


struct tagKeycor
{
   unsigned char row;
   unsigned char col;
}lastkey_cor;



static unsigned long col_scan_udelay = DFT_COL_SCAN_UDELAY;
module_param(col_scan_udelay, ulong, S_IRUGO);
MODULE_PARM_DESC(col_scan_udelay, "udelay before scan column status, "
		"default is 5");


static void matrix_kp_scan(unsigned long data);
static void matrix_kp_setup_scan_timer(struct timer_list * timer,
		unsigned long data)
{
	timer->function = matrix_kp_scan;
	timer->expires = jiffies + HZ/20;
	timer->data = data;
}


static void delay_ms(unsigned short xms)
{
    unsigned long tdealy = 0;
    tdealy = jiffies + (xms*HZ/1000);
    while(jiffies < tdealy)
    {
        ;
    }
}

static int judge_row_status(const unsigned char status,const int row_index)
{
    int col = (COL_NR - 1);

    for(;col >= 0;col--)
    {
       if(status == row_status[row_index][col])
       {
          return col;
       }
    }
    return -1;
}


static void matrix_kp_get_col_statusbyrow(unsigned char * status, int row_index)
{
    int col;
    int val;

    *status = 0;
    gpio_direction_output(row_gpio[row_index], 0);
    if (col_scan_udelay > 0)
    {
       udelay(col_scan_udelay);
    }
    for (col = 0; col < COL_NR; col++)
    {
       val = gpio_get_value(col_gpio[col]);
       if (val == 0)
       {
           *status |= (1<<col);
       }
    }
    gpio_direction_input(row_gpio[row_index]);
    if (col_scan_udelay > 0)
    {
       udelay(MAX_COL_SCAN_UDELAY*3);
    }
    //printk("\n after col scan,status[%d] = 0x%x\n",row_index,*status);
}

static unsigned char matrix_kp_changed(const unsigned char* status,\
                                        const unsigned char* oldstatus)
{
    return ( (*status) ^ (*oldstatus) );
}

static void decode_row_status(unsigned long data,const unsigned char new_status,\
           unsigned char *old_status,const int row_index,const int col_index)
{
    struct input_dev * dev = (struct input_dev*)data;
    int pressed = 0;
    int flage = 0;
    int col = -1;

    if(row_index == 1)
    {
       col = judge_row_status(*old_status,row_index);
       if(col >= 0)
       {
         input_report_key(dev, key_matrix[row_index][col],0);
         input_sync(dev);
         printk(KERN_ERR "\nkey %d will released,row=%x,col=%x \n",key_matrix[row_index][col],\
              row_index,col);
       }
       pressed = 1;
       flage = 1;
    }
    else
    {
       if((new_status > 0) && (*old_status == 0))
       {
           pressed = 1;
           flage = 1;
       }
       else if((new_status == 0) && (*old_status > 0))
       {
           pressed = 0;
           flage = 1;
       }
    }
    if(flage)
    {
       input_report_key(dev, key_matrix[row_index][col_index],pressed);
       input_sync(dev);
       printk(KERN_ERR "\nkey %d will %s,row=%x,col=%x\n",key_matrix[row_index][col_index],\
              pressed?"pressed":"released",row_index,col_index);
       *old_status = new_status;
    }
}
//--------------------process keys in row2-----------------------------------------
static void real_process_row2(unsigned long data,const unsigned char status)
{
    int col = -1;

    if(status > 0) //表示有键按下
    {
      col = judge_row_status(status,2);
    }
    else if(status == 0) //表示按键松开，需要根据上一次键值判断是哪个键
    {
      col = judge_row_status(row2_status,2);
    }
    if(col >= 0)
    {
       decode_row_status(data,status,&row2_status,2,col);
    }
}

static int matrix_kp_process_row2(unsigned long data)
{
    unsigned char new_status = 0;
    unsigned char changed = 0;
    int flage = -1;

    matrix_kp_get_col_statusbyrow(&new_status,2);
    changed = matrix_kp_changed(&new_status,&row2_status);
    if(changed)
    {
        delay_ms(20);
        matrix_kp_get_col_statusbyrow(&new_status,2);
        changed = matrix_kp_changed(&new_status,&row2_status);
        if(changed)
        {
           //printk(KERN_ERR "\n new_status2=%x,old_status2=%x\n",new_status,row2_status);
           real_process_row2(data,new_status);
        }
    }
    flage = (new_status == 0)?0:1;
    return flage;
}
//--------------------process keys in row1-----------------------------------------
static void real_process_row1(unsigned long data,const unsigned char status)
{
    int col = -1;

    if(status > 0) //表示有键按下
    {
      col = judge_row_status(status,1);
    }
    if(col >= 0)
    {
       decode_row_status(data,status,&row1_status,1,col);
    }
}

static void matrix_kp_process_row1(unsigned long data)
{
    unsigned char new_status = 0;
    unsigned char changed = 0;

    matrix_kp_get_col_statusbyrow(&new_status,1);
    changed = matrix_kp_changed(&new_status,&row1_status);
    if(changed)
    {
        delay_ms(20);
        matrix_kp_get_col_statusbyrow(&new_status,1);
        changed = matrix_kp_changed(&new_status,&row1_status);
        if(changed)
        {
           //printk(KERN_ERR "\n new_status1=%x,old_status1=%x\n",new_status,row1_status);
           real_process_row1(data,new_status);
        }
    }
}
//--------------------process keys in row0-----------------------------------------
static void real_process_row0(unsigned long data,const unsigned char status)
{
    int col = -1;

    if(status > 0) //表示有键按下
    {
      col = judge_row_status(status,0);
    }
    else if(status == 0) //表示按键松开，需要根据上一次键值判断是哪个键
    {
      col = judge_row_status(row0_status,0);
    }
    if(col >= 0)
    {
       decode_row_status(data,status,&row0_status,0,col);
    }
}

static void matrix_kp_process_row0(unsigned long data)
{
    unsigned char new_status = 0;
    unsigned char changed = 0;

    matrix_kp_get_col_statusbyrow(&new_status,0);
    changed = matrix_kp_changed(&new_status,&row0_status);
    if(changed)
    {
        delay_ms(20);
        matrix_kp_get_col_statusbyrow(&new_status,0);
        changed = matrix_kp_changed(&new_status,&row0_status);
        if(changed)
        {
           //printk(KERN_ERR "\n new_status0=%x,old_status0=%x\n",new_status,row0_status);
           real_process_row0(data,new_status);
        }
    }
}
//------------------------------------------------------------------------------
//-----------------------send a key when begining-------------------------------
static void send_key_when_init(unsigned long data,const unsigned char key,int pressed)
{
    struct input_dev *dev = (struct input_dev*)data;

    input_report_key(dev,key,pressed);
    input_sync(dev);
}

static void matrix_kp_scan(unsigned long data)
{
        int row2_pressed = 0;

        if (g_key_delay < (KEY_ENABLE_DELAY-2))
        {
          g_key_delay++ ;
        }
        else if(g_key_delay == (KEY_ENABLE_DELAY-2))
        {
          send_key_when_init(data,key_matrix[1][1],1);
          g_key_delay++ ;
        }
        else if(g_key_delay == KEY_ENABLE_DELAY)
        {
          send_key_when_init(data,key_matrix[1][1],0);
          g_key_delay++ ;
        }

        if(g_key_delay == (KEY_ENABLE_DELAY+1))
        {
          row2_pressed = matrix_kp_process_row2(data);
          if(!row2_pressed)
          {
            matrix_kp_process_row1(data);
            matrix_kp_process_row0(data);
          }
        }
	matrix_kp_setup_scan_timer(&scan_timer, data);
	add_timer(&scan_timer);
}

static int matrix_kp_open(struct input_dev *dev)
{
	gpio_request(10,"DaVinci");
	gpio_request(11,"DaVinci");
	gpio_request(12,"DaVinci");

	matrix_kp_get_col_statusbyrow(&row0_status,0);
        matrix_kp_get_col_statusbyrow(&row1_status,1);
        matrix_kp_get_col_statusbyrow(&row2_status,2);
	matrix_kp_setup_scan_timer(&scan_timer, (unsigned long)dev);
	add_timer(&scan_timer);

	lastkey_cor.row = 0xFF;
        lastkey_cor.col = 0xFF;

	return 0;
}

static void matrix_kp_close(struct input_dev *dev)
{
     del_timer_sync(&scan_timer);
}

static int matrix_kp_probe(struct platform_device *pdev)
{
	int row;
	int col;

	init_timer(&scan_timer);

	kp_input_dev = input_allocate_device();
	if (kp_input_dev == NULL)
	{
		return -ENOMEM;
	}

	set_bit(EV_KEY, kp_input_dev->evbit);
	for (row = 0; row < ROW_NR; row++)
	{
	   for (col = 0; col < COL_NR; col++)
	   {
	  	set_bit(key_matrix[row][col], kp_input_dev->keybit);
	   }
	}

	kp_input_dev->name = DEV_DRV_NAME;
	kp_input_dev->phys = DEV_DRV_NAME;
	kp_input_dev->dev.parent = &pdev->dev;
	kp_input_dev->id.bustype = BUS_HOST;
	kp_input_dev->open = matrix_kp_open;
	kp_input_dev->close = matrix_kp_close;

	if (input_register_device(kp_input_dev) < 0) 
	{
	   printk("\n: register input device fail\n");
	   printk(KERN_ERR DEV_DRV_NAME": register input device fail\n");
	   return -EINVAL;
	}
	printk("\n: register input device ok\n");
	return 0;
}

static int matrix_kp_remove(struct platform_device *pdev)
{
	input_unregister_device(kp_input_dev);
	input_free_device(kp_input_dev);
	return 0;
}

static void matrix_kp_release_dev(struct device * dev)
{
}

static struct platform_device davinci_matrix_keypad_device = {
	.name = DEV_DRV_NAME,
	.id = -1,
	.dev = {
		.platform_data = NULL,
		.release = matrix_kp_release_dev,
	},
	.num_resources = 0,
	.resource = NULL,
};

static struct platform_driver davinci_matrix_keypad_driver = {
	.driver = {
		.name = DEV_DRV_NAME,
	},
	.probe = matrix_kp_probe,
	.remove = matrix_kp_remove,
};

static void matrix_kp_check_params(void)
{
	if (col_scan_udelay > MAX_COL_SCAN_UDELAY)
	{
		printk(KERN_INFO "invalid col_scan_udelay %lu, "
				"reset it to default delay %d\n",
				col_scan_udelay, DFT_COL_SCAN_UDELAY);
		col_scan_udelay = DFT_COL_SCAN_UDELAY;
	}
}


static int __init matrix_kp_init(void)
{
	int rval = 0;
	int result;

	printk(KERN_INFO "init davinci matrix keypad driver\n");

	matrix_kp_check_params();

	result = platform_device_register(&davinci_matrix_keypad_device);
	if (result == 0)
	{
		result = platform_driver_register(&davinci_matrix_keypad_driver);
		if (result != 0)
		{
			printk(KERN_ERR "register davinci matrix kp driver fail\n");
			platform_device_unregister(&davinci_matrix_keypad_device);
			rval = result;
		}
	}
	else
	{
		printk(KERN_ERR "register davinci matrix kp device fail\n");
		rval = result;
	}

	return rval;
}

static void __exit matrix_kp_exit(void)
{
	printk(KERN_INFO "exit davinci matrix keypad driver\n");
#if 0
	unconfig_gpio();
#endif
	platform_driver_unregister(&davinci_matrix_keypad_driver);
	platform_device_unregister(&davinci_matrix_keypad_device);
}

module_init(matrix_kp_init);
module_exit(matrix_kp_exit);

MODULE_AUTHOR("creesec <creesec@sina.com>");
MODULE_DESCRIPTION("davinci matrix keypad driver");
MODULE_LICENSE("Dual BSD/GPL");

